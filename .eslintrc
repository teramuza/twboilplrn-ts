{
  "env": {
    "es6": true,
    "node": true,
    "react-native/react-native": true
  },
  "root": true,
  "extends": [
    "eslint:recommended",
    "plugin:react/recommended",
    "plugin:@typescript-eslint/eslint-recommended",
    "plugin:import/errors",
    "plugin:import/warnings",
    "plugin:wdio/recommended"
  ],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaFeatures": {
      "jsx": true
    },
    "ecmaVersion": 2018,
    "sourceType": "module",
    "_comment": "https://stackoverflow.com/a/68686975 (fix eslint parsing error: 'parserOptions.project')",
    "project": ["./tsconfig.json", "./tsconfig.eslint.json"],
    "tsconfigRootDir": "."
  },
  "plugins": [
    "react",
    "@typescript-eslint",
    "react-native",
    "module-resolver",
    "wdio",
    "import"
  ],
  "overrides": [
    {
      "files": ["*.ts", "*.tsx"],
      "parser": "@typescript-eslint/parser",
      "rules": {
        "@typescript-eslint/no-shadow": ["error"],
        "no-shadow": "off",
        "no-undef": "off",
        "arrow-parens": 2
      }
    }
  ],
  "rules": {
    "indent": ["warn", 4, { "SwitchCase": 1 }],
    "linebreak-style": ["warn", "unix"],
    "quotes": ["error", "single"],
    "semi": ["warn", "always"],
    "max-len": [
      "warn",
      {
        "code": 120
      }
    ],
    "no-unused-vars": ["error", { "vars": "local", "args": "after-used"}],
    "no-restricted-syntax": [
      "error",
      {
        "selector": "CallExpression[callee.name='useEffect'] > ArrowFunctionExpression",
        "message": "Use well named function as a callback such as `function getData() {}`"
      },
      {
        "selector": "JSXAttribute[value.expression.type='ArrowFunctionExpression']",
        "message": "Do not use arrow function as a props"
      },
      {
        "selector": "JSXAttribute[value.expression.type='CallExpression'][value.expression.callee.name!='t']",
        "message": "Do not invoke a function on props"
      }
    ],
    "no-undef": "error",
    "no-duplicate-imports": ["off"],
    "no-loss-of-precision": "off",
    "no-restricted-imports": [
      "error",
      {
        "name": "@components/button/Button",
        "message": "Please use Button from @flip.id/ui-kit instead."
      },
      {
        "name": "./button/Button",
        "message": "Please use Button from @flip.id/ui-kit instead."
      }
    ],
    "@typescript-eslint/no-explicit-any": "warn",
    "@typescript-eslint/no-empty-interface": "error",
    "@typescript-eslint/naming-convention": [
      "warn",
      {
        "selector": "default",
        "format": ["camelCase"]
      },
      {
        "selector": ["variable", "property"],
        "format": ["camelCase", "UPPER_CASE", "PascalCase"]
      },
      {
        "selector": "parameter",
        "format": ["camelCase"],
        "leadingUnderscore": "allow"
      },
      {
        "selector": "typeLike",
        "format": ["PascalCase"]
      },
      {
        "selector": "variable",
        "types": ["boolean"],
        "format": ["PascalCase"],
        "prefix": [
          "is",
          "should",
          "has",
          "can",
          "did",
          "will",
          "need",
          "are",
          "was"
        ]
      }
    ],
    "react/prop-types": "off",
    "react-native/no-unused-styles": "warn",
    "react-native/split-platform-components": "warn",
    "react-native/no-inline-styles": "warn",
    "react-native/no-color-literals": "warn",
    "react-native/no-raw-text": "warn",
    "module-resolver/use-alias": "off",
    "func-names": "error"
  },
  "settings": {
    "import/parsers": {
      "@typescript-eslint/parser": [".ts", ".tsx"]
    },
    "react": {
      "pragma": "React",
      "version": "detect"
    },
    "import/resolver": {
      "typescript": {
        "alwaysTryTypes": true,
        "project": "./"
      },
      "babel-module": {
        "node": {},
        "alias": {
          "@root": "./",
          "@app": "./app",
          "@api": "./app/Api",
          "@appTypes": "./app/Types",
          "@components": "./app/Components",
          "@constants": "./app/Constants",
          "@lang": "./app/I18n",
          "@router": "./app/Router",
          "@redux": "./app/Redux",
          "@themes": "./app/Themes",
          "@types": "./app/Types",
          "@utils": "./app/Utils",
          "@screens": "./app/Screens",
          "@states": "./app/States",
          "@storage": "./app/Storage"
        }
    }
    }
  }
}
